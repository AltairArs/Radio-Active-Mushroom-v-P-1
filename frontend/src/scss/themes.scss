@use "sass:color";
@use "sass:map";
@use "sass:list";

@function rotate($color, $angle){
  @return color.adjust($color, $hue: $angle);
}

@function setLight($color, $lightness){
  @return color.change($color, $lightness: $lightness);
}

@function invertLight($color){
  @return color.change($color, $lightness: (100% - color.channel($color, "lightness", hsl)));
}

@function createElements($color){
  @return (
          "text": setLight($color, 20%),
          "border": setLight($color, 20%),
          "mark": setLight($color, 35%),
          "shadow": setLight($color, 35%),
          "icon": setLight($color, 20%),
          "back-1": $color,
          "back-2": setLight($color, 70%),
          "back-3": setLight($color, 85%)
  );
}

@function createSubContainers($color){
  @return (
          "NONE": createElements($color),
          "INPUT": createElements(rotate($color, 20deg)),
          "INFO": createElements(rotate($color, -20deg))
  )
}

@function createContainers($color){
  @return (
          "NONE": createSubContainers(color.adjust($color, $hue: 40deg)),
          "PRIMARY": createSubContainers($color),
          "SECONDARY": createSubContainers(color.adjust($color, $hue: 20deg)),
          "TERTIARY": createSubContainers(color.adjust($color, $hue: -20deg)),
          "NAVBAR": createSubContainers(color.adjust($color, $hue: -40deg)),
          "TOOLTIP": createSubContainers(color.adjust($color, $hue: 60deg)),
          "MENU": createSubContainers(color.adjust($color, $hue: -60deg)),
          "ERROR": createSubContainers(color.adjust($color, $hue: 90deg))
  )
}

$THEME_MODES: [
  "LIGHT",
  "DARK"
];

$COLORS: (
        "RED": createContainers(firebrick),
        "BLUE": createContainers(skyblue),
        "ORANGE": createContainers(orange),
        "YELLOW": createContainers(gold),
        "GREEN": createContainers(limegreen),
        "PURPLE": createContainers(violet),
        "OLIVE": createContainers(olive),
        "CORAL": createContainers(coral),
        "TEAL": createContainers(seagreen),
        "HAKI": createContainers(khaki),
        "BISQUE": createContainers(bisque)
);

@function getColor($colorName, $containerName, $subContainerName, $typeElementName, $themeMode){
  $colorValue: map.get($COLORS, $colorName);
  $containerValue: map.get($colorValue, $containerName);
  $subContainerValue: map.get($containerValue, $subContainerName);
  $typeElementValue: map.get($subContainerValue, $typeElementName);
  @if ($themeMode == "DARK"){
    @return invertLight($typeElementValue);
  } @else {
    @return $typeElementValue;
  }
}

@function usableVariableName($typeElementName){
  @return "--c-" + $typeElementName;
}

@function utilVariableName($colorName, $containerName, $subContainerName, $typeElementName, $themeMode){
  @return "--util-c-" + $colorName + "--" + $containerName + "--" + $subContainerName + "--" + $typeElementName + "--" + $themeMode;
}

@mixin generateUtilColors(){
  @each $colorName, $colorValue in $COLORS{
    @each $containerName, $containerValue in $colorValue{
      @each $subContainerName, $subContainerValue in $containerValue{
        @each $typeElementName, $typeElementValue in $subContainerValue{
          @each $themeMode in $THEME_MODES{
            #{utilVariableName($colorName, $containerName, $subContainerName, $typeElementName, $themeMode)}: #{getColor($colorName, $containerName, $subContainerName, $typeElementName, $themeMode)};
          }
        }
      }
    }
  }
}

@mixin applyColors($colorName, $containerName, $subContainerName, $themeMode){
  @each $typeElementName, $typeElementValue in createElements(transparent){
    #{usableVariableName($typeElementName)}: var(#{utilVariableName($colorName, $containerName, $subContainerName, $typeElementName, $themeMode)});
  }
}

@mixin createColors(){
  :root {
    @include generateUtilColors();
  }

  @each $colorName, $colorValue in $COLORS{
    @each $containerName, $containerValue in $colorValue{
      @each $subContainerName, $subContainerValue in $containerValue{
        @each $themeMode in $THEME_MODES{
          [themeMode=#{$themeMode}][themeColor=#{$colorName}][containerType=#{$containerName}][subContainerType=#{$subContainerName}]{
            @include applyColors($colorName, $containerName, $subContainerName, $themeMode);
            --themeMode: #{$themeMode};
            --themeColor: #{$colorName};
            --containerType: #{$containerName};
            --subContainerType: #{$subContainerName};
          }
        }
      }
    }
  }
}